// server/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TUTOR
  ADMIN
}

enum SessionStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELED
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  fullName       String
  passwordHash   String
  role           UserRole      @default(STUDENT)
  profilePicture String?
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  tutorProfile   TutorProfile?

  sessionsAsStudent Session[] @relation("StudentSessions")
  sessionsAsTutor   Session[] @relation("TutorSessions")

  // Add relations for messaging
  conversations Conversation[]
  sentMessages  Message[]      @relation("SentMessages")
}

model TutorProfile {
  id            String   @id @default(cuid())
  bio           String?
  subjects      String[] @default([])
  hourlyRate    Decimal?
  languages     String[] @default([])
  isApproved    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Session {
  id           String        @id @default(cuid())
  subject      String
  scheduledAt  DateTime
  duration     Int
  status       SessionStatus @default(PENDING)
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  student   User   @relation("StudentSessions", fields: [studentId], references: [id])
  studentId String

  tutor   User   @relation("TutorSessions", fields: [tutorId], references: [id])
  tutorId String
}

// New Models for Messaging

model Conversation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Implicit many-to-many relation with User
  participants User[]
  
  // One-to-many relation with Message
  messages     Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false) // Add this field

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String

  sender   User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId String
}
